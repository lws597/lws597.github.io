<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lwscode</title>
  
  <subtitle>lws&#39; blog</subtitle>
  <link href="https://lwscode.cn/atom.xml" rel="self"/>
  
  <link href="https://lwscode.cn/"/>
  <updated>2021-04-16T10:27:00.025Z</updated>
  <id>https://lwscode.cn/</id>
  
  <author>
    <name>lws</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://lwscode.cn/22/"/>
    <id>https://lwscode.cn/22/</id>
    <published>2021-04-14T13:07:18.435Z</published>
    <updated>2021-04-16T10:27:00.025Z</updated>
    
    <content type="html"><![CDATA[<h1>类和对象3</h1><h2 id="继承">继承</h2><p>面向对象程序设计中最重要的一个概念是继承。继承允许我们依据另一个类来定义一个类，这使得创建和维护一个应用程序变得更容易。这样做，也达到了重用代码功能和提高执行效率的效果。</p><p>当创建一个类时，您不需要重新编写新的数据成员和成员函数，只需指定新建的类继承了一个已有的类的成员即可。这个已有的类称为<strong>基类</strong>，新建的类称为<strong>派生类</strong>。</p><h3 id="子类的访问权限">子类的访问权限</h3><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">public</th><th style="text-align:left">protected</th><th style="text-align:left">private</th></tr></thead><tbody><tr><td style="text-align:left">public</td><td style="text-align:left">yes</td><td style="text-align:left">yes</td><td style="text-align:left">yes</td></tr><tr><td style="text-align:left">protected</td><td style="text-align:left">yes</td><td style="text-align:left">yes</td><td style="text-align:left">no</td></tr><tr><td style="text-align:left">private</td><td style="text-align:left">no</td><td style="text-align:left">no</td><td style="text-align:left">no</td></tr></tbody></table><h3 id="对外的访问权限">对外的访问权限</h3><table><thead><tr><th></th><th>public</th><th>protected</th><th>private</th></tr></thead><tbody><tr><td>public</td><td>public</td><td>protected</td><td>private</td></tr><tr><td>protected</td><td>protected</td><td>protected</td><td>private</td></tr><tr><td>private</td><td>no</td><td>no</td><td>no</td></tr></tbody></table><h3 id="菱形继承（A-D-B-D-C-A，B-）">菱形继承（A-&gt;D, B-&gt;D, C-&gt;(A，B)）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">class D&#123;......&#125;;<br>class B: public D&#123;......&#125;;<br>class A: public D&#123;......&#125;;<br>class C: public B, public A&#123;.....&#125;;<br></code></pre></td></tr></table></figure><p>这个继承会使D创建两个对象,要解决上面问题就要用虚拟继承格式</p><p>格式：<strong>class 类名: virtual 继承方式 父类名</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">class D&#123;......&#125;;<br>class B: virtual public D&#123;......&#125;;<br>class A: virtual public D&#123;......&#125;;<br>class C: public B, public A&#123;.....&#125;;<br></code></pre></td></tr></table></figure><p>虚继承–（在创建对象的时候会创建一个虚表）在创建父类对象的时候</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">A:virtual public D<br>B:virtual public D<br></code></pre></td></tr></table></figure><h3 id="访问控制和继承">访问控制和继承</h3><p>派生类可以访问基类中所有的非私有成员。因此基类成员如果不想被派生类的成员函数访问，则应在基类中声明为 private。<br>我们可以根据访问权限总结出不同的访问类型，如下所示：</p><table><thead><tr><th style="text-align:left">访问</th><th style="text-align:left">public</th><th style="text-align:left">protected</th><th style="text-align:left">private</th></tr></thead><tbody><tr><td style="text-align:left">同一个类</td><td style="text-align:left">yes</td><td style="text-align:left">yes</td><td style="text-align:left">yes</td></tr><tr><td style="text-align:left">派生类</td><td style="text-align:left">yes</td><td style="text-align:left">yes</td><td style="text-align:left">no</td></tr><tr><td style="text-align:left">外部的类</td><td style="text-align:left">yes</td><td style="text-align:left">no</td><td style="text-align:left">no</td></tr></tbody></table><p>一个派生类继承了所有的基类方法，但下列情况除外：</p><ul><li>基类的构造函数、析构函数和拷贝构造函数</li><li>基类的重载运算符</li><li>基类的友元函数</li></ul><p>当使用不同类型的继承时，遵循以下几个规则：</p><ul><li><strong>公有继承（public）：<strong>当一个类派生自</strong>公有</strong>基类时，基类的<strong>公有</strong>成员也是派生类的<strong>公有</strong>成员，基类的<strong>保护</strong>成员也是派生类的<strong>保护</strong>成员，基类的<strong>私有</strong>成员不能直接被派生类访问，但是可以通过调用基类的<strong>公有</strong>和<strong>保护</strong>成员来访问。</li><li><strong>保护继承（protected）：</strong> 当一个类派生自<strong>保护</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>保护</strong>成员。</li><li><strong>私有继承（private）：<strong>当一个类派生自</strong>私有</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>私有</strong>成员。</li></ul><h2 id="运算符重载">运算符重载</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Point</span>() &#123;&#125;<br>    <span class="hljs-built_in">Point</span>(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y) : <span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y) &#123;&#125;<br>    <span class="hljs-built_in">Point</span>(<span class="hljs-keyword">const</span> Point &amp;obj) : <span class="hljs-built_in">x</span>(obj.x), <span class="hljs-built_in">y</span>(obj.y) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;copy constructor&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;x + <span class="hljs-keyword">this</span>-&gt;y + num;<br>    &#125;<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>[](string str) &#123;<br>        <span class="hljs-keyword">if</span> (str == <span class="hljs-string">&quot;x&quot;</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;x;<br>        <span class="hljs-keyword">if</span> (str == <span class="hljs-string">&quot;y&quot;</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;y;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    Point <span class="hljs-keyword">operator</span>-(<span class="hljs-keyword">const</span> Point &amp;a) &#123;<br>        Point ret;<br>        ret.x = <span class="hljs-keyword">this</span>-&gt;x - a.x;<br>        ret.y = <span class="hljs-keyword">this</span>-&gt;y - a.y;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;, <span class="hljs-keyword">const</span> Point &amp;);<br>    <span class="hljs-keyword">friend</span> Point <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> Point &amp;, <span class="hljs-keyword">const</span> Point &amp;);<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> x, y;<br>&#125;;<br><br>Point <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> Point &amp;a, <span class="hljs-keyword">const</span> Point &amp;b) &#123;<br>    Point ret;<br>    ret.x = a.x + b.x;<br>    ret.y = a.y + b.y;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br>ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;output, <span class="hljs-keyword">const</span> Point &amp;a) &#123;<br>    output &lt;&lt; <span class="hljs-string">&quot;&lt;class Point&gt;(&quot;</span> &lt;&lt; a.x &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; a.y &lt;&lt; <span class="hljs-string">&quot;)&quot;</span>;<br>    <span class="hljs-keyword">return</span> output;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Point a(2, 4), b(5, 3);<br>    Point c = a + b;<br>    Point d = a + b + c;<br>    Point e = d - b;<br>    cout &lt;&lt; a &lt;&lt; endl;<br>    cout &lt;&lt; b &lt;&lt; endl;<br>    cout &lt;&lt; c &lt;&lt; endl;<br>    cout &lt;&lt; d &lt;&lt; endl;<br>    cout &lt;&lt; e &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">intArray</span> &#123;</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">int</span> *p;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">intArray</span>(<span class="hljs-keyword">int</span> n) : <span class="hljs-built_in">n</span>(n) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;p = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>    &#125;<br>    <span class="hljs-built_in">intArray</span>(<span class="hljs-keyword">const</span> intArray &amp;obj) : <span class="hljs-built_in">n</span>(obj.n) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;p = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">this</span>-&gt;p[i] = obj.p[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (p[i] == num) <span class="hljs-keyword">return</span> i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> op)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (op) std::<span class="hljs-built_in">sort</span>(p, p + n);<br>        <span class="hljs-keyword">else</span> std::<span class="hljs-built_in">sort</span>(p, p + n, [](<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b) &#123;<span class="hljs-keyword">return</span> a &gt; b;&#125;);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">()</span> </span>&#123;<br>        std::<span class="hljs-built_in">reverse</span>(p, p + n);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">int</span> &amp;<span class="hljs-keyword">operator</span>[](<span class="hljs-keyword">int</span> ind) &#123;<br>        <span class="hljs-keyword">if</span> (ind &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;p[n + ind];<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;p[ind];<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-keyword">operator</span>+=(<span class="hljs-keyword">int</span> num) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">this</span>-&gt;p[i] += num;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    intArray &amp;<span class="hljs-keyword">operator</span>++() &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">this</span>-&gt;p[i]++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    intArray <span class="hljs-keyword">operator</span>++(<span class="hljs-keyword">int</span> x) &#123;<br>        intArray ret = *<span class="hljs-keyword">this</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">this</span>-&gt;p[i]++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;, <span class="hljs-keyword">const</span> intArray &amp;);<br>    ~<span class="hljs-built_in">intArray</span>() &#123;<br>        <span class="hljs-keyword">delete</span>[] <span class="hljs-keyword">this</span>-&gt;p;<br>    &#125;<br>&#125;;<br><br>ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;output, <span class="hljs-keyword">const</span> intArray &amp;a) &#123;<br>    output &lt;&lt; <span class="hljs-string">&quot;&lt;class intArray&gt;:&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.n; i++) &#123;<br>        output &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; a.p[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> output;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">intArray <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        a[i] = i;<br>    &#125;<br>    cout &lt;&lt; a.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    cout &lt;&lt; a.<span class="hljs-built_in">find</span>(<span class="hljs-number">3</span>) &lt;&lt; endl;<br>    cout &lt;&lt; a[<span class="hljs-number">4</span>] &lt;&lt; endl;<br>    cout &lt;&lt; a[<span class="hljs-number">-2</span>] &lt;&lt; endl;<br>    a += <span class="hljs-number">5</span>;<br>    cout &lt;&lt; a &lt;&lt; endl;<br>    a.<span class="hljs-built_in">sort</span>(<span class="hljs-number">1</span>);<br>    cout &lt;&lt; a &lt;&lt; endl;<br>    a.<span class="hljs-built_in">sort</span>(<span class="hljs-number">0</span>);<br>    cout &lt;&lt; a &lt;&lt; endl;<br>    a.<span class="hljs-built_in">reverse</span>();<br>    cout &lt;&lt; a &lt;&lt; endl;<br>    cout &lt;&lt; (a++) &lt;&lt; endl;<br>    cout &lt;&lt; (++a) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;类和对象3&lt;/h1&gt;
&lt;h2 id=&quot;继承&quot;&gt;继承&lt;/h2&gt;
&lt;p&gt;面向对象程序设计中最重要的一个概念是继承。继承允许我们依据另一个类来定义一个类，这使得创建和维护一个应用程序变得更容易。这样做，也达到了重用代码功能和提高执行效率的效果。&lt;/p&gt;
&lt;p&gt;当创建一个类时，您</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://lwscode.cn/25/"/>
    <id>https://lwscode.cn/25/</id>
    <published>2021-04-14T13:07:18.435Z</published>
    <updated>2021-04-16T10:27:00.026Z</updated>
    
    <content type="html"><![CDATA[<h1>类和对象4</h1><h2 id="多态">多态</h2><p>多态按字面的意思就是多种形态。当类之间存在层次结构，并且类之间是通过继承关联时，就会用到多态。</p><p>C++多态意味着调用成员函数时，会根据调用函数的对象的类型来执行不同的函数。</p><h3 id="虚函数">虚函数</h3><p>虚函数是在基类中使用关键字virtual声明的函数。在派生类中重新定义基类中定义的虚函数时，会告诉编译器不要静态链接到该函数。</p><p>我们想要的是在程序中任意点可以根据所调用的对象类型来选择调用的函数，这种操作被称为动态链接，或后期绑定。</p><h3 id="纯虚函数">纯虚函数</h3><p>语义：子类肯定会有这个方法，而父类只能说“抱歉”</p><p>应用场景：定义接口</p><p>您可能想要在基类中定义虚函数，以便在派生类中重新定义该函数更好地适用于对象，但是您在基类中又不能对虚函数给出有意义的实现，这个时候就会用到纯虚函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">string <span class="hljs-title">rand_name</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    string name = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        name = name + (<span class="hljs-keyword">char</span>)(<span class="hljs-built_in">rand</span>() % <span class="hljs-number">26</span> + <span class="hljs-string">&#x27;A&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> name;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Animal</span>(string name) : <span class="hljs-built_in">name</span>(name) &#123;&#125;<br>    <span class="hljs-function">string <span class="hljs-title">get_name</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;name;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;I don&#x27;t know how to run.&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Animal</span>() &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;kill Animal&quot;</span> &lt;&lt; endl;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    string name;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> :</span> <span class="hljs-keyword">public</span> Animal &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Cat</span>() : <span class="hljs-built_in">Animal</span>(<span class="hljs-string">&quot;Cat &quot;</span> + <span class="hljs-built_in">rand_name</span>(<span class="hljs-number">5</span>)) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;I can run with four legs.&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;miao~miao~miao~&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    ~<span class="hljs-built_in">Cat</span>() &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;kill Cat&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bat</span> :</span> <span class="hljs-keyword">public</span> Animal &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Bat</span>() : <span class="hljs-built_in">Animal</span>(<span class="hljs-string">&quot;Bat &quot;</span> + <span class="hljs-built_in">rand_name</span>(<span class="hljs-number">5</span>)) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;I can fly.&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;zzz~zzz~zzz~&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    ~<span class="hljs-built_in">Bat</span>() &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;kill Bat&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Cat cat_a;<br>    Bat bat_a;<br>    cout &lt;&lt; cat_a.<span class="hljs-built_in">get_name</span>() &lt;&lt; endl;<br>    cat_a.<span class="hljs-built_in">run</span>();<br>    cout &lt;&lt; bat_a.<span class="hljs-built_in">get_name</span>() &lt;&lt; endl;<br>    bat_a.<span class="hljs-built_in">run</span>();<br>    Animal **p = <span class="hljs-keyword">new</span> Animal*[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">rand</span>() % <span class="hljs-number">2</span>) &#123;<br>            p[i] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Cat</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            p[i] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Bat</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        cout &lt;&lt; p[i]-&gt;<span class="hljs-built_in">get_name</span>() &lt;&lt; endl;<br>        p[i]-&gt;<span class="hljs-built_in">run</span>();<br>        p[i]-&gt;<span class="hljs-built_in">say</span>();<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-keyword">delete</span> p[i];<br>    &#125;<br>    <span class="hljs-keyword">delete</span>[] p;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="virtual-关键字">virtual 关键字</h3><p>语义：子类的这个方法可能会跟父类的有所不同</p><p>成员方法调用时：</p><p>virtual 关键字的方法跟着对象</p><p>非virtual 关键字的方法跟着类</p><p>限制：</p><p>不能用来修饰类方法-static</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Animal</span>() &#123;<br>        x = <span class="hljs-number">8827</span>, y = <span class="hljs-number">65123</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;I don&#x27;t know how to say.&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;I don&#x27;t know how to run.&quot;</span> &lt;&lt; endl;<br>    &#125;<br><span class="hljs-keyword">protected</span> :<br>    <span class="hljs-keyword">int</span> x, y;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> :</span> <span class="hljs-keyword">public</span> Animal &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-keyword">this</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-keyword">this</span>-&gt;x  &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;y &lt;&lt; endl;<br>        cout &lt;&lt; x &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;miao~ miao~ miao~&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;I can run with four legs&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output_raw_data</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *q, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p : &quot;</span>, q);<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *p = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%02X &quot;</span>, p[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span> <span class="hljs-params">(*func)</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *, <span class="hljs-keyword">int</span> x)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Cat a, b;<br>    <span class="hljs-built_in">output_raw_data</span>(&amp;a, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(a));<br>    <span class="hljs-built_in">output_raw_data</span>(&amp;b, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(b));<br>    ((func **)(&amp;a))[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>](&amp;a, <span class="hljs-number">123</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="模板">模板</h2><h3 id="泛型编程">泛型编程</h3><p>将任意类型从程序设计中抽象出来</p><table><thead><tr><th></th><th>泛型编程</th></tr></thead><tbody><tr><td>面向过程编程</td><td>用模板实现函数过程</td></tr><tr><td>面向对象编程</td><td>用模板实现类</td></tr></tbody></table><h3 id="函数模板-类模板">函数模板 类模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function">T <span class="hljs-title">add</span><span class="hljs-params">(T a, T b)</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;add function: &quot;</span> &lt;&lt; <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(T) &lt;&lt; endl;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;i = &quot;</span> &lt;&lt; (++i) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;&gt;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;&quot;</span><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Array</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Array</span>(<span class="hljs-keyword">int</span> n) : <span class="hljs-built_in">n</span>(n) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;p = <span class="hljs-keyword">new</span> T[n];<br>    &#125;<br>    T &amp;<span class="hljs-keyword">operator</span>[](<span class="hljs-keyword">int</span> ind) &#123;<br>        <span class="hljs-keyword">if</span> (ind &lt; <span class="hljs-number">0</span> || ind &gt;= n) <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;__end;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;p[ind];<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    T *p;<br>    <span class="hljs-keyword">int</span> n;<br>    T __end;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;&gt;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Array</span>&lt;</span><span class="hljs-keyword">double</span>&gt; &#123;<br><span class="hljs-keyword">public</span>:<br><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;output, <span class="hljs-keyword">const</span> Array&lt;<span class="hljs-keyword">int</span>&gt; &amp;a) &#123;<br>    <span class="hljs-keyword">return</span> output;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-built_in">add</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-built_in">add</span>(<span class="hljs-number">2.3</span>, <span class="hljs-number">4.5</span>) &lt;&lt; endl;<br>    cout &lt;&lt; add&lt;<span class="hljs-keyword">double</span>&gt;(<span class="hljs-number">2.3</span>, <span class="hljs-number">4</span>) &lt;&lt; endl;<br>    <span class="hljs-function">Array&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>    <span class="hljs-function">Array&lt;<span class="hljs-keyword">double</span>&gt; <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="变参模板">变参模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T &amp;a)</span> </span>&#123;<br>    cout &lt;&lt; a &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> ...ARGS&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T &amp;a, ARGS ...args)</span> </span>&#123;<br>    cout &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-built_in">print</span>(args...);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> ...ARGS&gt;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ARG</span> &#123;</span><br>    <span class="hljs-keyword">typedef</span> T getT;<br>    <span class="hljs-keyword">typedef</span> ARG&lt;ARGS...&gt; rest;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ARG</span>&lt;</span>T&gt; &#123;<br>    <span class="hljs-keyword">typedef</span> T getT;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> ...ARGS&gt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>;</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> ...ARGS&gt;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>&lt;</span><span class="hljs-built_in">T</span>(ARGS...)&gt; &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">T <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">typename</span> ARG&lt;ARGS...&gt;::getT a, <span class="hljs-keyword">typename</span> ARG&lt;ARGS...&gt;::rest::getT b)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">123</span>, <span class="hljs-string">&quot;hello world&quot;</span>, <span class="hljs-number">26.23</span>, <span class="hljs-string">&#x27;c&#x27;</span>);<br>    cout &lt;&lt; <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(ARG&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">double</span>, <span class="hljs-keyword">float</span>&gt;::getT) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(ARG&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">double</span>, <span class="hljs-keyword">float</span>&gt;::rest::getT) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(ARG&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">double</span>, <span class="hljs-keyword">float</span>&gt;::rest::rest::getT) &lt;&lt; endl;<br>    ARG&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">double</span>, <span class="hljs-keyword">float</span>&gt;::getT a = <span class="hljs-number">123</span>;<br>    ARG&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">double</span>, <span class="hljs-keyword">float</span>&gt;::rest::getT b = <span class="hljs-number">12.3</span>;<br>    ARG&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">double</span>, <span class="hljs-keyword">float</span>&gt;::rest::rest::getT c = <span class="hljs-number">123.34</span>;<br>    cout &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; c &lt;&lt; endl;<br>    Test&lt;<span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(<span class="hljs-keyword">double</span>, <span class="hljs-keyword">float</span>)&gt; d;<br>    cout &lt;&lt; <span class="hljs-built_in">d</span>(<span class="hljs-number">2.3</span>, <span class="hljs-number">4.5</span>) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;类和对象4&lt;/h1&gt;
&lt;h2 id=&quot;多态&quot;&gt;多态&lt;/h2&gt;
&lt;p&gt;多态按字面的意思就是多种形态。当类之间存在层次结构，并且类之间是通过继承关联时，就会用到多态。&lt;/p&gt;
&lt;p&gt;C++多态意味着调用成员函数时，会根据调用函数的对象的类型来执行不同的函数。&lt;/p&gt;
&lt;h3 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://lwscode.cn/17/"/>
    <id>https://lwscode.cn/17/</id>
    <published>2021-04-14T13:07:18.434Z</published>
    <updated>2021-04-16T10:27:00.023Z</updated>
    
    <content type="html"><![CDATA[<p>printf输出颜色和ANSI控制码(高亮,下划线,闪烁,光标位置,清屏等)</p><p>颜色：</p><p>#define NONE “/033[m”</p><p>#define RED “/033[0;32;31m”</p><p>#define LIGHT_RED “/033[1;31m”</p><p>#define GREEN “/033[0;32;32m”</p><p>#define LIGHT_GREEN “/033[1;32m”</p><p>#define BLUE “/033[0;32;34m”</p><p>#define LIGHT_BLUE “/033[1;34m”</p><p>#define DARY_GRAY “/033[1;30m”</p><p>#define CYAN “/033[0;36m”</p><p>#define LIGHT_CYAN “/033[1;36m”</p><p>#define PURPLE “/033[0;35m”</p><p>#define LIGHT_PURPLE “/033[1;35m”</p><p>#define BROWN “/033[0;33m”</p><p>#define YELLOW “/033[1;33m”</p><p>#define LIGHT_GRAY “/033[0;37m”</p><p>#define WHITE “/033[1;37m”</p><p>比如：</p><p>printf(“/033[31m ####-----&gt;&gt; /033[32m” “hello/n” “/033[m”)</p><p>int main()</p><p>{</p><p>printf( CYAN “current function is %s &quot; GREEN &quot; file line is %d/n” NONE,</p><p><strong>FUNCTION</strong>, <strong>LINE</strong> );</p><p>fprintf(stderr, RED “current function is %s &quot; BLUE &quot; file line is %d/n” NONE,</p><p><strong>FUNCTION</strong>, <strong>LINE</strong> );</p><p>return 0;</p><p>}</p><p>颜色分为背景色和字体色，30~39用来设置字体色，40~49设置背景：</p><p>背景色 字体色</p><p>40: 黑 30: 黑</p><p>41: 红 31: 红</p><p>42: 绿 32: 绿</p><p>43: 黄 33: 黄</p><p>44: 蓝 34: 蓝</p><p>45: 紫 35: 紫</p><p>46: 深绿 36: 深绿</p><p>47: 白色 37: 白色</p><p>记得在打印完之后，把颜色恢复成NONE，不然再后面的打印都会跟着变色。</p><p>另外，还可以加一些ANSI控制码。加颜色只是以下控制码中的一种：</p><p>/033[0m 关闭所有属性</p><p>/033[1m 设置高亮度</p><p>/033[4m 下划线</p><p>/033[5m 闪烁</p><p>/033[7m 反显</p><p>/033[8m 消隐</p><p>/033[30m – /033[37m 设置前景色</p><p>/033[40m – /033[47m 设置背景色</p><p>/033[nA 光标上移n行</p><p>/033[nB 光标下移n行</p><p>/033[nC 光标右移n行</p><p>/033[nD 光标左移n行</p><p>/033[y;xH设置光标位置</p><p>/033[2J 清屏</p><p>/033[K 清除从光标到行尾的内容</p><p>/033[s 保存光标位置</p><p>/033[u 恢复光标位置</p><p>/033[?25l 隐藏光标</p><p>/033[?25h 显示光标</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;printf输出颜色和ANSI控制码(高亮,下划线,闪烁,光标位置,清屏等)&lt;/p&gt;
&lt;p&gt;颜色：&lt;/p&gt;
&lt;p&gt;#define NONE “/033[m”&lt;/p&gt;
&lt;p&gt;#define RED “/033[0;32;31m”&lt;/p&gt;
&lt;p&gt;#define LIGHT_RE</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://lwscode.cn/20/"/>
    <id>https://lwscode.cn/20/</id>
    <published>2021-04-14T13:07:18.434Z</published>
    <updated>2021-04-16T10:27:00.025Z</updated>
    
    <content type="html"><![CDATA[<h1>vim中的查找与替换</h1><h5 id="1-查找"><strong>1.查找</strong></h5><p>在normal模式下按下<code>/</code>即可进入查找模式，输入要查找的字符串并按下回车。 Vim会跳转到第一个匹配。按下<code>n</code>查找下一个，按下<code>N</code>查找上一个。</p><p>Vim查找支持正则表达式，例如<code>/vim$</code>匹配行尾的<code>&quot;vim&quot;</code>。 需要查找特殊字符需要转义，例如<code>/vim\$</code>匹配<code>&quot;vim$&quot;</code>。</p><h5 id="2-大小写敏感查找"><strong>2.大小写敏感查找</strong></h5><p>在查找模式中加入<code>\c</code>表示大小写不敏感查找，<code>\C</code>表示大小写敏感查找。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#x2F;foo\c<br></code></pre></td></tr></table></figure><p>将会查找所有的<code>&quot;foo&quot;</code>,<code>&quot;FOO&quot;</code>,<code>&quot;Foo&quot;</code>等字符串。</p><h5 id="3-大小写敏感配置"><strong>3.大小写敏感配置</strong></h5><p>Vim 默认采用大小写敏感的查找，为了方便我们常常将其配置为大小写不敏感：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">&quot; 设置默认进行大小写不敏感查找<br>set ignorecase<br>&quot; 如果有一个大写字母，则切换到大小写敏感查找<br>set smartcase <br></code></pre></td></tr></table></figure><blockquote><p>将上述设置粘贴到你的<code>~/.vimrc</code>，重新打开Vim即可生效</p></blockquote><h5 id="4-查找当前单词"><strong>4.查找当前单词</strong></h5><p>在normal模式下按下<code>*</code>即可查找光标所在单词（word）， 要求每次出现的前后为空白字符或标点符号。例如当前为<code>foo</code>， 可以匹配<code>foo bar</code>中的<code>foo</code>，但不可匹配<code>foobar</code>中的<code>foo</code>。 这在查找函数名、变量名时非常有用。</p><p>按下<code>g*</code>即可查找光标所在单词的字符序列，每次出现前后字符无要求。 即<code>foo bar</code>和<code>foobar</code>中的<code>foo</code>均可被匹配到。</p><h5 id="5-查找与替换"><strong>5.查找与替换</strong></h5><p><code>:s</code>（substitute）命令用来查找和替换字符串。语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">:&#123;作用范围&#125;s&#x2F;&#123;目标&#125;&#x2F;&#123;替换&#125;&#x2F;&#123;替换标志&#125;<br></code></pre></td></tr></table></figure><p>例如<code>:%s/foo/bar/g</code>会在全局范围(<code>%</code>)查找<code>foo</code>并替换为<code>bar</code>，所有出现都会被替换（<code>g</code>）</p><h5 id="6-作用范围"><strong>6.作用范围</strong></h5><p>作用范围分为当前行、全文、选区等等。</p><p>当前行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">:s&#x2F;foo&#x2F;bar&#x2F;g<br></code></pre></td></tr></table></figure><p>全文：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">:%s&#x2F;foo&#x2F;bar&#x2F;g<br></code></pre></td></tr></table></figure><p>选区，在Visual模式下选择区域后输入<code>:</code>，Vim即可自动补全为 <code>:'&lt;,'&gt;</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">:&#39;&lt;,&#39;&gt;s&#x2F;foo&#x2F;bar&#x2F;g<br></code></pre></td></tr></table></figure><p>2-11行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">:5,12s&#x2F;foo&#x2F;bar&#x2F;g<br></code></pre></td></tr></table></figure><p>当前行<code>.</code>与接下来两行<code>+2</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">:.,+2s&#x2F;foo&#x2F;bar&#x2F;g<br></code></pre></td></tr></table></figure><h2 id="替换标志">替换标志</h2><p>上文中命令结尾的<code>g</code>即是替换标志之一，表示全局<code>global</code>替换（即替换目标的所有出现）。 还有很多其他有用的替换标志：</p><p>空替换标志表示只替换从光标位置开始，目标的第一次出现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">:%s&#x2F;foo&#x2F;bar<br></code></pre></td></tr></table></figure><p><code>i</code>表示大小写不敏感查找，<code>I</code>表示大小写敏感：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">:%s&#x2F;foo&#x2F;bar&#x2F;i<br># 等效于模式中的\c（不敏感）或\C（敏感）<br>:%s&#x2F;foo\c&#x2F;bar<br></code></pre></td></tr></table></figure><p><code>c</code>表示需要确认，例如全局查找<code>&quot;foo&quot;</code>替换为<code>&quot;bar&quot;</code>并且需要确认：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">:%s&#x2F;foo&#x2F;bar&#x2F;gc<br></code></pre></td></tr></table></figure><p>回车后Vim会将光标移动到每一次<code>&quot;foo&quot;</code>出现的位置，并提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">replace with bar (y&#x2F;n&#x2F;a&#x2F;q&#x2F;l&#x2F;^E&#x2F;^Y)?<br></code></pre></td></tr></table></figure><p>按下<code>y</code>表示替换，<code>n</code>表示不替换，<code>a</code>表示替换所有，<code>q</code>表示退出查找模式， <code>l</code>表示替换当前位置并退出。<code>^E</code>与<code>^Y</code>是光标移动快捷键，参考： <a href="http://harttle.com/2015/11/07/vim-cursor.html">Vim中如何快速进行光标移</a></p><h2 id="大小写敏感查找">大小写敏感查找</h2><p>在查找模式中加入<code>\c</code>表示大小写不敏感查找，<code>\C</code>表示大小写敏感查找。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#x2F;foo\c<br></code></pre></td></tr></table></figure><p>将会查找所有的<code>&quot;foo&quot;</code>,<code>&quot;FOO&quot;</code>,<code>&quot;Foo&quot;</code>等字符串。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;vim中的查找与替换&lt;/h1&gt;
&lt;h5 id=&quot;1-查找&quot;&gt;&lt;strong&gt;1.查找&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;在normal模式下按下&lt;code&gt;/&lt;/code&gt;即可进入查找模式，输入要查找的字符串并按下回车。 Vim会跳转到第一个匹配。按下&lt;code&gt;n&lt;/c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://lwscode.cn/26/"/>
    <id>https://lwscode.cn/26/</id>
    <published>2021-04-14T13:07:18.434Z</published>
    <updated>2021-04-16T10:27:00.027Z</updated>
    
    <content type="html"><![CDATA[<h1>类和对象</h1><h2 id="类型与变量">类型与变量</h2><table><thead><tr><th>类型</th><th>变量</th></tr></thead><tbody><tr><td>int</td><td>a</td></tr><tr><td>long long</td><td>b</td></tr><tr><td>char</td><td>c</td></tr><tr><td>double</td><td>d</td></tr><tr><td>float</td><td>e</td></tr></tbody></table><p>类型 = 类型数据 + 类型操作</p><h2 id="类与对象">类与对象</h2><table><thead><tr><th>类</th><th>对象</th></tr></thead><tbody><tr><td>cat</td><td>garfield</td></tr><tr><td>dog</td><td>odie</td></tr><tr><td>people</td><td>hug</td></tr></tbody></table><h3 id="访问权限">访问权限</h3><table><thead><tr><th>public</th><th>公共访问权限</th></tr></thead><tbody><tr><td>private</td><td>私有访问权限</td></tr><tr><td>protected</td><td>受保护的访问权限</td></tr></tbody></table><h3 id="成员属性与方法">成员属性与方法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">A</span> &#123;</span><br>    <span class="hljs-keyword">int</span> x, y;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">echo</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;hello world a&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">B</span> &#123;</span><br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> x, y;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_xy</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-keyword">this</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">this</span>-&gt;x = x, <span class="hljs-keyword">this</span>-&gt;y = y;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">echo</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;hello world b&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    A a;<br>    B b;<br>    a.x = <span class="hljs-number">1</span>, a.y = <span class="hljs-number">2</span>;<br>    b.<span class="hljs-built_in">set_xy</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br>    cout &lt;&lt; &amp;b &lt;&lt; endl;<br>    cout &lt;&lt; a.x &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; a.y &lt;&lt; endl;<br>    b.<span class="hljs-built_in">echo</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="构造函数与析构函数">构造函数与析构函数</h3><table><thead><tr><th>构造/析构函数</th><th>使用方式</th></tr></thead><tbody><tr><td>默认构造函数</td><td>People a;</td></tr><tr><td>People(string name)</td><td>People a(“hug”);</td></tr><tr><td>People(const People &amp;a)</td><td>拷贝构造，与=不等价</td></tr><tr><td>~People();</td><td>无</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">A</span> &#123;</span><br>    <span class="hljs-built_in">A</span>() : <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-keyword">this</span> &lt;&lt; <span class="hljs-string">&quot; default constructor&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-built_in">A</span>(A *obj) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;next = obj;<br>        <span class="hljs-keyword">this</span>-&gt;next-&gt;arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">1000</span>];<br>    &#125;<br>    <span class="hljs-built_in">A</span>(<span class="hljs-keyword">int</span> n) : <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-keyword">this</span> &lt;&lt; <span class="hljs-string">&quot; an int constructor&quot;</span> &lt;&lt; endl;<br>        x = n, y = n;<br>    &#125;<br>    <span class="hljs-built_in">A</span>(<span class="hljs-keyword">const</span> A &amp;obj) : <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-keyword">this</span> &lt;&lt; <span class="hljs-string">&quot; copy constructor&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">this</span>-&gt;x = obj.x, <span class="hljs-keyword">this</span>-&gt;y = obj.y;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-keyword">this</span>-&gt;x &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;y &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">int</span> x, y;<br>    <span class="hljs-keyword">int</span> *arr;<br>    A *next;<br>    ~<span class="hljs-built_in">A</span>() &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;next) &#123;<br>            <span class="hljs-keyword">delete</span> <span class="hljs-keyword">this</span>-&gt;next-&gt;arr;<br>        &#125;<br>        cout &lt;&lt; <span class="hljs-keyword">this</span> &lt;&lt; <span class="hljs-string">&quot; destructor&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x)</span> </span>&#123;<br>    x += <span class="hljs-number">5</span>;<br>&#125;<br><br>A aa;<br><span class="hljs-function">A <span class="hljs-title">bb</span><span class="hljs-params">(&amp;aa)</span></span>;<br><span class="hljs-function">A <span class="hljs-title">cc</span><span class="hljs-params">(&amp;bb)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">7</span>;<br>    <span class="hljs-built_in">func</span>(n);<br>    cout &lt;&lt; n &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;pre position&quot;</span> &lt;&lt; endl;<br>    A a;<br>    A b = <span class="hljs-number">8</span>;<br>    <span class="hljs-function">A <span class="hljs-title">c</span><span class="hljs-params">(a)</span></span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; &amp;a &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; &amp;b &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;c = &quot;</span> &lt;&lt; &amp;c &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;aa = &quot;</span> &lt;&lt; &amp;aa &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;bb = &quot;</span> &lt;&lt; &amp;bb &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;cc = &quot;</span> &lt;&lt; &amp;cc &lt;&lt; endl;<br>    b.<span class="hljs-built_in">output</span>();<br>    b = <span class="hljs-number">6</span>;<br>    b.<span class="hljs-built_in">output</span>();<br>    cout &lt;&lt; <span class="hljs-string">&quot;next position&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="类的构造函数">类的构造函数</h4><p>类的构造函数是类的一种特殊的成员函数，它会在每次创建类的新对象时执行。</p><p>构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，也不会返回 void。构造函数可用于为某些成员变量设置初始值。</p><h4 id="类的析构函数">类的析构函数</h4><p>类的析构函数是类的一种特殊的成员函数，它会在每次删除所创建的对象时执行。</p><p>析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号 (~) 作为前缀，它不会返回任何值，也不能带有任何参数。析构函数有助于在跳出程序（比如关闭文件、释放内存等）前释放资源。</p><p><a href="https://www.runoob.com/cplusplus/cpp-constructor-destructor.html">https://www.runoob.com/cplusplus/cpp-constructor-destructor.html</a></p><p>结构体与类</p><p>struct 访问权限默认为public</p><p>class 访问权限默认为private</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;类和对象&lt;/h1&gt;
&lt;h2 id=&quot;类型与变量&quot;&gt;类型与变量&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;变量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;/t</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://lwscode.cn/24/"/>
    <id>https://lwscode.cn/24/</id>
    <published>2021-04-14T13:07:18.434Z</published>
    <updated>2021-04-16T10:27:00.026Z</updated>
    
    <content type="html"><![CDATA[<h1>类和对象</h1><h2 id="类属性与类方法">类属性与类方法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> &#123;</span><br><span class="hljs-keyword">public</span> :<br>    <span class="hljs-built_in">A</span>(<span class="hljs-keyword">int</span> x) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;class A&#x27;s constructor&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span> &#123;</span><br><span class="hljs-keyword">public</span> :<br>    <span class="hljs-built_in">Point</span>();<br>    <span class="hljs-built_in">Point</span>(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y);<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">x</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">y</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">x_cnt</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_x</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_y</span><span class="hljs-params">(<span class="hljs-keyword">int</span> y)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">output_cnt</span><span class="hljs-params">()</span></span>;<br>    ~<span class="hljs-built_in">Point</span>();<br><br><span class="hljs-keyword">private</span> :<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> point_cnt;<br>    <span class="hljs-keyword">int</span> __x, __y;<br>    <span class="hljs-keyword">mutable</span> <span class="hljs-keyword">int</span> __x_cnt;<br>    A __a;<br>&#125;;<br><br><span class="hljs-keyword">int</span> Point::point_cnt = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Point::output_cnt</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> Point::point_cnt;<br>&#125;<br><br>Point::<span class="hljs-built_in">Point</span>() : __x_cnt(<span class="hljs-number">0</span>), __a(<span class="hljs-number">2</span>) &#123;<br>    Point::point_cnt += <span class="hljs-number">1</span>;<br>&#125;<br><br>Point::<span class="hljs-built_in">Point</span>(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y) : <br>    __x(x), __y(y), <br>    __x_cnt(<span class="hljs-number">0</span>), __a(<span class="hljs-number">4</span>) &#123;<br>    Point::point_cnt += <span class="hljs-number">1</span>;<br>&#125;<br><br>Point::~<span class="hljs-built_in">Point</span>() &#123;<br>    Point::point_cnt -= <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Point::x</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;__x_cnt += <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;__x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Point::y</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;__y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Point::x_cnt</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;__x_cnt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Point::set_x</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;__x = x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Point::set_y</span><span class="hljs-params">(<span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;__x = y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>&#123;<br>    Point c, d;<br>    cout &lt;&lt; <span class="hljs-string">&quot;func : &quot;</span> &lt;&lt; Point::<span class="hljs-built_in">output_cnt</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Point a(2, 3), b;<br>    <span class="hljs-function"><span class="hljs-keyword">const</span> Point <span class="hljs-title">c</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)</span></span>;<br>    cout &lt;&lt; a.<span class="hljs-built_in">x</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; a.<span class="hljs-built_in">y</span>() &lt;&lt; endl;<br>    cout &lt;&lt; c.<span class="hljs-built_in">x</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; c.<span class="hljs-built_in">y</span>() &lt;&lt; endl;<br>    cout &lt;&lt; c.<span class="hljs-built_in">x</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; c.<span class="hljs-built_in">y</span>() &lt;&lt; endl;<br>    cout &lt;&lt; a.<span class="hljs-built_in">x_cnt</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; b.<span class="hljs-built_in">x_cnt</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; c.<span class="hljs-built_in">x_cnt</span>() &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;befor func : &quot;</span> &lt;&lt; Point::<span class="hljs-built_in">output_cnt</span>() &lt;&lt; endl;<br>    <span class="hljs-built_in">func</span>();<br>    cout &lt;&lt; <span class="hljs-string">&quot;after func : &quot;</span> &lt;&lt; Point::<span class="hljs-built_in">output_cnt</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>mutalbe的中文意思是“可变的，易变的”，跟constant（既C++中的const）是反义词。在C++中，mutable也是为了突破const的限制而设置的。被mutable修饰的变量，将永远处于可变的状态，即使在一个const函数中。</p><p>当一个属性、方法被static修饰的时候，就叫做类属性、类方法，又叫做静态属性、静态方法 。</p><p>没有被static修饰的属性，就叫对象属性、对象方法，又叫实例属性、实例方法和非静态属性、非静态方法。</p><p>当一个属性被声明成类属性，那么所有的对象，都共享一个值，所有对象都可以修改这个值，一经修改前面的值将会被丢弃。</p><p>而对象属性，每个对象的对象属性的值都互不影响，修改一个对象的对象属性，另一个对象的对象属性不变。</p><h2 id="深拷贝和浅拷贝">深拷贝和浅拷贝</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> &#123;</span><br><span class="hljs-keyword">public</span> :<br>    <span class="hljs-built_in">A</span>() &#123;<br>        <span class="hljs-keyword">this</span>-&gt;arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">100</span>];<br>    &#125;<br>    <span class="hljs-built_in">A</span>(<span class="hljs-keyword">const</span> A &amp;obj) : <span class="hljs-built_in">x</span>(obj.x), <span class="hljs-built_in">y</span>(obj.y) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">100</span>];<br>        <span class="hljs-built_in">memcpy</span>(<span class="hljs-keyword">this</span>-&gt;arr, obj.arr, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>) * <span class="hljs-number">100</span>);<br>    &#125;<br>    <span class="hljs-keyword">int</span> *arr;<br>    <span class="hljs-keyword">int</span> x, y;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    A a;<br>    a.x = <span class="hljs-number">3</span>, a.y = <span class="hljs-number">6</span>;<br>    a.arr[<span class="hljs-number">0</span>] = <span class="hljs-number">123</span>;<br>    A b = a;<br>    b.arr[<span class="hljs-number">0</span>] = <span class="hljs-number">456</span>;<br>    cout &lt;&lt; a.arr[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; b.arr[<span class="hljs-number">0</span>] &lt;&lt; endl;<br>    cout &lt;&lt; b.x &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; b.y &lt;&lt; endl;<br>    b.x = <span class="hljs-number">6</span>;<br>    cout &lt;&lt; a.x &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; a.y &lt;&lt; endl;<br>    cout &lt;&lt; b.x &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; b.y &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>浅拷贝只是增加了一个指针指向已存在的内存地址；</p><p>深拷贝是增加了一个指针并且申请了一个新的内存，使这个增加的指针指向这个新的内存</p><h2 id="返回值优化">返回值优化</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> &#123;</span><br><span class="hljs-keyword">public</span> :<br>    <span class="hljs-built_in">A</span>() &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;constructor&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-built_in">A</span>(<span class="hljs-keyword">const</span> A &amp;obj) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;copy constructor&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function">A <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>&#123;<br>    A temp;<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">A <span class="hljs-title">a</span><span class="hljs-params">(func())</span></span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>返回优化直接编译（g++）</p><p>返回不优化g++ -fno-elide-constructors</p><p>不优化：</p><ul><li>step1：开辟a对象数据区</li><li>step2：调用函数func</li><li>step3：开辟对象temp_a数据区</li><li>step4：调用temp_a对象的构造函数</li><li>step5：使用temp_a调用临时匿名变量的拷贝构造函数</li><li>step6：销毁temp_a对象</li><li>step7：使用临时匿名变量调用a的拷贝构造函数</li><li>step8：销毁临时匿名变量</li><li>step9：销毁a对象</li></ul><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">constructor<br>copy constructor<br>copy constructor<br></code></pre></td></tr></table></figure><p>优化后</p><ul><li>step1：开辟a对象数据区</li><li>step2：调用函数func</li><li>step3：将temp_a设置为a对象的替身</li><li>step4：调用temp_a对象的构造函数</li><li>step5：销毁a对象</li></ul><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">constructor <br></code></pre></td></tr></table></figure><p>返回值优化是C++的一项编译优化技术，即删除保持函数返回值的临时对象。这可能会省略两次复制构造函数，即使复制构造函数有副作用。典型地，当一个函数返回一个对象实例，一个临时对象将被创建并通过复制构造函数把目标对象复制给这个临时对象。C++标准允许省略这些复制构造函数，即使这导致程序的不同行为，即使编译器把两个对象视作同一个具有副作用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;类和对象&lt;/h1&gt;
&lt;h2 id=&quot;类属性与类方法&quot;&gt;类属性与类方法&lt;/h2&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://lwscode.cn/11/"/>
    <id>https://lwscode.cn/11/</id>
    <published>2021-04-14T13:07:18.433Z</published>
    <updated>2021-04-16T10:27:00.022Z</updated>
    
    <content type="html"><![CDATA[<h1>avl_tree</h1><h2 id="节点数">节点数</h2><p>在高度为h的avl树中，最少节点数low(h)</p><p>low(h) = low(h - 1) + low(h - 2) + 1low(0) = 1 low(1) = 2</p><p>最大节点数max(h)</p><p>max(h) = 2^h - 1</p><h2 id="平衡">平衡</h2><p>LL型 右旋</p><p>RR型 左旋</p><p>LR型 左旋–&gt;(LL型)–&gt;右旋</p><p>RL型 右旋–&gt;(RR型)–&gt;左旋</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;avl_tree&lt;/h1&gt;
&lt;h2 id=&quot;节点数&quot;&gt;节点数&lt;/h2&gt;
&lt;p&gt;在高度为h的avl树中，最少节点数low(h)&lt;/p&gt;
&lt;p&gt;low(h) = low(h - 1) + low(h - 2) + 1	low(0) = 1 low(1) = 2&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://lwscode.cn/10/"/>
    <id>https://lwscode.cn/10/</id>
    <published>2021-04-14T13:07:18.433Z</published>
    <updated>2021-04-16T10:27:00.021Z</updated>
    
    <content type="html"><![CDATA[<h1>c++ stl</h1><h2 id="queue-类说明">queue-类说明</h2><p>queue类：队列</p><ul><li>头文件：queue</li><li>命名空间：std</li><li>声明：queue&lt;data_type&gt; q;</li></ul><table><thead><tr><th style="text-align:left">q.fornt()</th><th>查看队首元素</th></tr></thead><tbody><tr><td style="text-align:left">q.empty()</td><td>队列判空</td></tr><tr><td style="text-align:left">q.push()</td><td>入队</td></tr><tr><td style="text-align:left">q.pop()</td><td>出队</td></tr><tr><td style="text-align:left">q.size()</td><td>队列元素数量</td></tr></tbody></table><h2 id="stack-类说明">stack-类说明</h2><p>stack类：栈</p><ul><li>头文件：stack</li><li>命名空间：std</li><li>声明：stack&lt;data_type&gt; s;</li></ul><table><thead><tr><th>s.top()</th><th>查看栈顶元素</th></tr></thead><tbody><tr><td>s.empty()</td><td>栈判空</td></tr><tr><td>s.push()</td><td>入栈</td></tr><tr><td>s.pop()类</td><td>出栈</td></tr><tr><td>s.size()</td><td>栈元素数量</td></tr></tbody></table><h2 id="string-类说明">string-类说明</h2><p>string类：字符串</p><ul><li>头文件：string</li><li>命名空间：std</li><li>声明：string str1, str2;</li></ul><table><thead><tr><th>str1 == str2</th><th>字符串判等</th></tr></thead><tbody><tr><td>str1 &lt; str2</td><td>字典序小于</td></tr><tr><td>str1 &gt; str2</td><td>字典序大于</td></tr><tr><td>str1 += str2</td><td>字符串连接</td></tr><tr><td>str1.length()</td><td>字符串长度</td></tr></tbody></table><h3 id="string-hzoj-166">string (hzoj-166)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string str1, str2;<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; str1 &gt;&gt; n &gt;&gt; str2;<br>    cout &lt;&lt; <span class="hljs-built_in">min</span>(str1.<span class="hljs-built_in">length</span>(), (<span class="hljs-keyword">size_t</span>)<span class="hljs-number">100</span>) &lt;&lt; endl;<br>    str1.<span class="hljs-built_in">insert</span>(n - <span class="hljs-number">1</span>, str2);<br>    cout &lt;&lt; str1 &lt;&lt; endl;<br>    cout &lt;&lt; str1.<span class="hljs-built_in">length</span>() - str1.<span class="hljs-built_in">rfind</span>(<span class="hljs-string">&#x27;x&#x27;</span>) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="hash-map-类说明">hash_map-类说明</h2><p>hash_map类：字符串</p><ul><li>头文件：&lt;hash_map&gt; / &lt;ext/hash_map&gt;</li><li>命名空间：__gnu_cxx</li><li>声明：hash_map&lt;key_type, value_type, hash_func&gt; h;</li></ul><table><thead><tr><th>h.find(key)</th><th>判断某个key值是否在hash_map中</th></tr></thead><tbody><tr><td>h[key] = value</td><td>将value存储在key位上</td></tr><tr><td>h[key]</td><td>房屋key值对应的value</td></tr><tr><td>h.begin()</td><td>哈希表的起始位置</td></tr><tr><td>h.end()</td><td>哈希表的结束位置</td></tr></tbody></table><h2 id="unordered-map-类说明（c-11标准）">unordered_map-类说明（c++11标准）</h2><p>unordered_map-类：字符串</p><ul><li>头文件：unordered_map</li><li>命名空间：std</li><li>声明：unordered_map&lt;key_type, value_type, hash_func&gt; h;</li></ul><table><thead><tr><th>h.find(key)</th><th>判断某个key值是否在unordered_map中</th></tr></thead><tbody><tr><td>h[key] = value</td><td>将value存储在key位上</td></tr><tr><td>h[key]</td><td>访问key值对应的value</td></tr><tr><td>h.begin()</td><td>哈希表的起始位置</td></tr><tr><td>h.end()</td><td>哈希表的结束位置</td></tr></tbody></table><h3 id="sort-hzoj-245">sort (hzoj-245)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> max_n 100000</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> a[max_n + <span class="hljs-number">5</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(a, a + n);<br>    <span class="hljs-keyword">int</span> p = a[n &gt;&gt; <span class="hljs-number">1</span>], ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        ans += <span class="hljs-built_in">abs</span>(p - a[i]);<br>    &#125;<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="nth-element-hzoj-245">nth_element (hzoj-245)</h3><p>nth_element是部分排序算法，它重排[first, last)中元素，使得：</p><ul><li>nth所指向的元素被更改为假如[first, last)已排序则该位置会出现的元素。</li><li>这个新的nth元素前的所有元素小于或等于新的 nth 元素后的所有元素。</li></ul><p>更正式而言，nth_element以升序部分排序范围[first, last)，使得对于任何范围[first, nth)中的i和任何范围[nth, last)中的j，都满足条件!(*j &lt; i)。置于nth位置的元素则准确地是假如完全排序范围则应出现于此位置的元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> max_n 100000</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> a[max_n + <span class="hljs-number">5</span>], ind[max_n + <span class="hljs-number">5</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-built_in">nth_element</span>(a, a + (n &gt;&gt; <span class="hljs-number">1</span>), a + n);<br>    <span class="hljs-keyword">int</span> p = a[n &gt;&gt; <span class="hljs-number">1</span>], ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        ans += <span class="hljs-built_in">abs</span>(p - a[i]);<br>    &#125;<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="map">map</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string name;<br>    <span class="hljs-keyword">int</span> n, age;<br>    set&lt;<span class="hljs-keyword">int</span>&gt; s;<br>    s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">3</span>);<br>    s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">5</span>);<br>    s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>);<br>    s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">3</span>);<br>    cout &lt;&lt; *s.<span class="hljs-built_in">begin</span>() &lt;&lt; endl;<br>    s.<span class="hljs-built_in">erase</span>(s.<span class="hljs-built_in">begin</span>());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> iter = s.<span class="hljs-built_in">begin</span>(); iter != s.<span class="hljs-built_in">end</span>(); iter++) &#123;<br>        cout &lt;&lt; *iter &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    map&lt;<span class="hljs-keyword">int</span>, string&gt; arr;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; age &gt;&gt; name;<br>        arr[age] = name;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> iter = arr.<span class="hljs-built_in">begin</span>(); iter != arr.<span class="hljs-built_in">end</span>(); iter++) &#123;<br>        cout &lt;&lt; iter-&gt;second &lt;&lt; endl; <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="存储任意类型的数组-vector-array">存储任意类型的数组 (vector-&gt;array)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Array</span> &#123;</span><br><span class="hljs-keyword">public</span> :<br>    <span class="hljs-built_in">Array</span>() &#123;<br>        <span class="hljs-keyword">this</span>-&gt;__size = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">this</span>-&gt;__cnt  = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">this</span>-&gt;data = <span class="hljs-keyword">new</span> T[<span class="hljs-keyword">this</span>-&gt;__size];<br>    &#125;<br>    <span class="hljs-built_in">Array</span>(<span class="hljs-keyword">int</span> n) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;__size = <span class="hljs-number">2</span> * n;<br>        <span class="hljs-keyword">this</span>-&gt;__cnt  = n;<br>        <span class="hljs-keyword">this</span>-&gt;data = <span class="hljs-keyword">new</span> T[<span class="hljs-keyword">this</span>-&gt;__size];<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_back</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T &amp;a)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span>(<span class="hljs-keyword">this</span>-&gt;data + ((<span class="hljs-keyword">this</span>-&gt;__cnt)++)) <span class="hljs-built_in">T</span>(a);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;__cnt;<br>    &#125;<br>    T &amp;<span class="hljs-keyword">operator</span>[](<span class="hljs-keyword">int</span> ind) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;data[ind];<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    T *data;<br>    <span class="hljs-keyword">int</span> __size, __cnt;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">arr</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>    <span class="hljs-function">Array&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">arr2</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>    cout &lt;&lt; arr.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    arr.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">123</span>);<br>    cout &lt;&lt; arr[<span class="hljs-number">0</span>] &lt;&lt; endl;<br>    cout &lt;&lt; arr.<span class="hljs-built_in">size</span>() &lt;&lt; endl; <br>    cout &lt;&lt; arr2.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    arr2.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">123</span>);<br>    cout &lt;&lt; arr2[<span class="hljs-number">0</span>] &lt;&lt; endl;<br>    cout &lt;&lt; arr2.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;c++ stl&lt;/h1&gt;
&lt;h2 id=&quot;queue-类说明&quot;&gt;queue-类说明&lt;/h2&gt;
&lt;p&gt;queue类：队列&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;头文件：queue&lt;/li&gt;
&lt;li&gt;命名空间：std&lt;/li&gt;
&lt;li&gt;声明：queue&amp;lt;data_type&amp;gt; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://lwscode.cn/16/"/>
    <id>https://lwscode.cn/16/</id>
    <published>2021-04-14T13:07:18.433Z</published>
    <updated>2021-04-16T10:27:00.023Z</updated>
    
    <content type="html"><![CDATA[<h1>git设置和取消代理</h1><h2 id="设置如下：">设置如下：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global https.proxy http://127.0.0.1:1080<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global https.proxy https://127.0.0.1:1080<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global http.proxy <span class="hljs-string">&#x27;socks5://127.0.0.1:1080&#x27;</span> <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global https.proxy <span class="hljs-string">&#x27;socks5://127.0.0.1:1080&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="取消">取消</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global --<span class="hljs-built_in">unset</span> http.proxy<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global --<span class="hljs-built_in">unset</span> https.proxy<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;git设置和取消代理&lt;/h1&gt;
&lt;h2 id=&quot;设置如下：&quot;&gt;设置如下：&lt;/h2&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Manjaro Kde安装后的配置</title>
    <link href="https://lwscode.cn/32699/"/>
    <id>https://lwscode.cn/32699/</id>
    <published>2021-04-14T13:07:18.433Z</published>
    <updated>2021-04-14T13:07:18.434Z</updated>
    
    <content type="html"><![CDATA[<h1>manjaro kde安装后的配置</h1><h2 id="启动项">启动项</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo update-grub<br></code></pre></td></tr></table></figure><h2 id="镜像源（选择清华源）">镜像源（选择清华源）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo pacman-mirrors -i -c China -m rank<br>sudo pacman -Syy<br>sudo nano /etc/pacman.conf<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">[archlinuxcn]<br>SigLevel &#x3D; Optional TrustedOnly<br>Server &#x3D; http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;archlinuxcn&#x2F;$arch<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo pacman -S archlinuxcn-keyring<br>sudo apcman -Syyu<br></code></pre></td></tr></table></figure><h2 id="安装软件">安装软件</h2><h3 id="yay">yay</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S yay base-devel<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yay --save --aururl &quot;https://aur.tuna.tsinghua.edu.cn&quot;<br></code></pre></td></tr></table></figure><h3 id="git">git</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yay -S git<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name &#x27;lws597&#x27;<br>git config --global user.email &#x27;1320949958@qq.com&#x27;<br>sudo vim /etc/hosts<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">52.74.223.119 github.com<br>151.101.77.194 github.global.ssl.fastly.net<br>151.101.76.133 raw.githubusercontent.com<br></code></pre></td></tr></table></figure><h4 id="github密钥导入">github密钥导入</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen<br>cat .ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><h3 id="常用">常用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yay -S gcc go jdk8-openjdk clang python python2 google-chrome netease-cloud-music typora<br></code></pre></td></tr></table></figure><h3 id="pip">pip</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yay -S python-pip python2-pip<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir ~/.pip<br>nano ~/.pip/pip.conf<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">[global]<br>index-url &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple<br>[install]<br>trusted-host &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn<br></code></pre></td></tr></table></figure><h3 id="npm">npm</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set registry https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g cnpm --registry=https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><h3 id="neovim">neovim</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yay -Rns vim<br>yay -S neovim<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd .config<br>git clone git://github.com/lws597/nvim<br></code></pre></td></tr></table></figure><h3 id="zsh">zsh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yay -S zsh<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh -c &quot;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;<br></code></pre></td></tr></table></figure><h4 id="zsh插件">zsh插件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">plugins&#x3D;(git zsh-autosuggestions zsh-syntax-highlighting autojump web-search extract last-working-dir sudo pip thefuck colored-man-pages colorize safe-paste git-open vi-mode copyfile copydir gitfast command-not-found history)<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">yay -S autojump thefuck<br>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting<br>git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions<br>git clone https://github.com/paulirish/git-open.git $ZSH_CUSTOM/plugins/git-open<br></code></pre></td></tr></table></figure><h4 id="zshrc添加">zshrc添加</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">alias vim&#x3D;&quot;nvim&quot;<br>alias vi&#x3D;&quot;nvim&quot;<br>alias rm&#x3D;&quot;rm -i&quot;<br>alias cp&#x3D;&quot;cp -i&quot;<br>alias cls&#x3D;&quot;clear&quot;<br>alias cat&#x3D;&quot;ccat&quot;<br>alias ra&#x3D;&quot;ranger&quot;<br>alias -s c&#x3D;copyfile<br>alias -s cpp&#x3D;copyfile<br></code></pre></td></tr></table></figure><h3 id="输入法（rime）">输入法（rime）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yay -S fcitx-im kcm-fcitx fcitx-rime<br>sudo vim ~/.xprofile<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">export GTK_IM_MODULE&#x3D;fcitx<br>export QT_IM_MODULE&#x3D;fcitx<br>export XMODIFIERS&#x3D;&quot;&quot;@im&#x3D;fcitx&quot;<br></code></pre></td></tr></table></figure><h3 id="wps">wps</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yay -S wps-office-mui-zh-cn wps-office ttf-wps-fonts<br></code></pre></td></tr></table></figure><h3 id="IDE">IDE</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yay -S visual-studio-code-bin visual-studio-code-bin<br></code></pre></td></tr></table></figure><h3 id="字体">字体</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yay -S nerd-fonts-complete ttf-monaco ttf-hanazono<br></code></pre></td></tr></table></figure><h3 id="美化">美化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yay -S latte-dock<br></code></pre></td></tr></table></figure><p>主题arc</p><p>图标numix papirus</p><p>光标mcmojave</p><h3 id="其他软件">其他软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yay -S xmind zoom dingtalk electronic-wechat qq-linux<br></code></pre></td></tr></table></figure><h3 id="双系统时间">双系统时间</h3><p>windows端管理员下cmd或powershell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">reg add &quot;HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\TimeZoneInformation&quot; /v RealTimeIsUniversal /d 1 /t REG_QWORD /f<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;manjaro kde安装后的配置&lt;/h1&gt;
&lt;h2 id=&quot;启动项&quot;&gt;启动项&lt;/h2&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/sp</summary>
      
    
    
    
    <category term="Linux" scheme="https://lwscode.cn/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://lwscode.cn/tags/Linux/"/>
    
    <category term="manjaro" scheme="https://lwscode.cn/tags/manjaro/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://lwscode.cn/4/"/>
    <id>https://lwscode.cn/4/</id>
    <published>2021-04-14T13:07:18.432Z</published>
    <updated>2021-04-16T10:27:00.020Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1>DAY03</h1><h2 id="Linux极简入门">Linux极简入门</h2><h3 id="文件与目录的管理">文件与目录的管理</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>ls</td><td>显示文件及目录信息</td></tr><tr><td>cp</td><td>拷贝</td></tr><tr><td>rm</td><td>删除</td></tr><tr><td>mv</td><td>移动</td></tr></tbody></table><h3 id="cp拷贝">cp拷贝</h3><p>cp [irapdslu] <sour> <dest></p><p>选项</p><ul><li>-i若文件存在，询问用户</li><li>-r递归复制</li><li>-apdr的集合</li><li>-p连同文件属性一起拷贝</li><li>-d若源文件为连接文件的属性，则复制连接文件的属性</li><li>-s拷贝为软连接</li><li>-l拷贝为硬连接</li><li>-u源文件比目的文件新才拷贝</li></ul><h3 id="rm删除">rm删除</h3><p>rm [irf] &lt;dir_or_file&gt;</p><p>选项</p><ul><li>-i互动模式</li><li>-r递归删除</li><li>-fforce</li></ul><h3 id="mv移动">mv移动</h3><p>mv [ifu] &lt;source…&gt; <dest></p><ul><li>mv source1 source2 souce3 dir</li></ul><p>选项</p><ul><li>-i互动模式</li><li>-fforce</li><li>-u源文件更新才会移动</li></ul><h3 id="文件内容的查阅">文件内容的查阅</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>cat</td><td>正向连接读</td></tr><tr><td>tac</td><td>反向连接读</td></tr><tr><td>nl</td><td>输出行号显示文件</td></tr><tr><td>more</td><td>一页一页的显示文件内容</td></tr><tr><td>less</td><td>与more相似，但是可以上下翻看</td></tr><tr><td>head</td><td>只看头几行</td></tr><tr><td>tail</td><td>只看末尾几行</td></tr></tbody></table><h3 id="cat正向连续读">cat正向连续读</h3><p>cat [-AbEnTv] <file></p><p>选项:</p><ul><li>-A:相当于-vET</li><li>-v:列出看不出的字符</li><li>-E:显示断行符为$</li><li>-T:显示TAB为^T</li><li>-b:列出行号</li><li>-n:列出行号,连同空行也编号</li></ul><h3 id="tac反向连续读">tac反向连续读</h3><p>刚好与cat相反,从最后一行开始打印</p><h3 id="nl输出行号显示文件">nl输出行号显示文件</h3><p>nl [-bnw] <file></p><p>选项</p><ul><li>-b:行号指定的方式</li><li><ul><li>-b a:相当于cat -n</li><li>-b t:相当于cat -b</li></ul></li><li>-n:列出行号的表示方法</li><li><ul><li>-n ln:行号在屏幕最左边显示</li><li>-n rn:行号在自己字段的最右边显示</li><li>-n rz:行号在自己字段的最右边显示,前面自动补全0</li></ul></li><li>-w <num>:行号所占位数</li></ul><h3 id="more按页查看">more按页查看</h3><p>more file</p><ul><li>/string向下查找string关键字</li><li>:f显示文件名称和当前显示的行数</li><li>q离开</li></ul><h3 id="less按页查看">less按页查看</h3><p>less file</p><ul><li>/string向下查找n:继续向下查找</li><li>/?string反向查找N:继续反向查询</li></ul><h3 id="head查看头几行">head查看头几行</h3><p>head [-n num] <file></p><ul><li>-n num:显示前num行</li></ul><h3 id="tail查看末尾几行">tail查看末尾几行</h3><p>tail [-n num] <file></p><ul><li>-n num:显示文件后num行</li><li>-f:force</li></ul><p>如何查看一个文件的101行到120行?</p><p>man ls | nl -b a -w 5 -n rz | head -n 120 | tail -n 20</p><h3 id="man手册">man手册</h3><ol><li>man手册页分为下面几个部分:</li><li>普通命令</li><li>内核提供的系统调用</li><li>库调用(C库函数)</li><li>特殊文件(大多数在/dev目录下)和设备</li><li>文件格式规范</li><li>游戏</li><li>杂项(及其规范)</li><li>系统管理命令(通常需要root权限)和守护进程</li></ol><h2 id="配置wifi">配置wifi</h2><h3 id="打开终端-执行命令">打开终端,执行命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo service NetworkManager stop#关闭NetworkManager<br>sudo service NetworkManager start#开启NetworkManager<br></code></pre></td></tr></table></figure><h3 id="执行命令-查看网卡命名">执行命令,查看网卡命名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">ifcongif -a<br></code></pre></td></tr></table></figure><h3 id="更改interfaces配置">更改interfaces配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo vim &#x2F;etc&#x2F;network&#x2F;interfaces<br></code></pre></td></tr></table></figure><p>在文本框中输入,保存并退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">auto wlp3s0<br>allow-hotplug wlp3s0<br>iface wlp3s0 inet dhcp<br>pre-up wpa_supplicant -Dwext -i wlp3s0 -c &#x2F;etc&#x2F;wpa_supplicant&#x2F;wpa_supplicant.conf -B<br></code></pre></td></tr></table></figure><h3 id="编辑wpa-supplicant-conf">编辑wpa_supplicant.conf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo vim &#x2F;etc&#x2F;wpa_supplicant&#x2F;wpa_supplicant.conf <br></code></pre></td></tr></table></figure><p>在文本框中输入,保存并退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">country&#x3D;CN<br>ctrl_interface&#x3D;DIR&#x3D;&#x2F;var&#x2F;run&#x2F;wpa_supplicant GROUP&#x3D;netdev<br>update_config&#x3D;1<br>network&#x3D;&#123;<br>    ssid&#x3D;&quot;HaiZei_Tech&quot;<br>    psk&#x3D;&quot;HaiZei731.&quot;<br>    scan_ssid&#x3D;1<br>    priority&#x3D;3<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="更改DNS">更改DNS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo vim &#x2F;etc&#x2F;resolv.conf<br></code></pre></td></tr></table></figure><p>nameserver 8.8.8.8</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;DAY03&lt;/h1&gt;
&lt;h2 id=&quot;Linux极简入门&quot;&gt;Linux极简入门&lt;/h2&gt;
&lt;h3 id=&quot;文件与目录的管理&quot;&gt;文件与目录的管理&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://lwscode.cn/8/"/>
    <id>https://lwscode.cn/8/</id>
    <published>2021-04-14T13:07:18.432Z</published>
    <updated>2021-04-16T10:27:00.021Z</updated>
    
    <content type="html"><![CDATA[<h1>DAY04</h1><h2 id="使用github管理代码">使用github管理代码</h2><h3 id="创建一个空目录">创建一个空目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">mkdir hzoj<br>cd hzoj<br>pwd<br></code></pre></td></tr></table></figure><h3 id="把目录变成git仓库">把目录变成git仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git init<br></code></pre></td></tr></table></figure><h3 id="把文件添加到仓库">把文件添加到仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git add *<br></code></pre></td></tr></table></figure><h3 id="把文件提交到仓库">把文件提交到仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git commit *<br></code></pre></td></tr></table></figure><h3 id="查看结果">查看结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git status<br></code></pre></td></tr></table></figure><h3 id="把本地库的所有内容推送到远程库上">把本地库的所有内容推送到远程库上</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">git remote add origin git@github.com:lws597&#x2F;HZOJ.git<br>git push -u origin master<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;DAY04&lt;/h1&gt;
&lt;h2 id=&quot;使用github管理代码&quot;&gt;使用github管理代码&lt;/h2&gt;
&lt;h3 id=&quot;创建一个空目录&quot;&gt;创建一个空目录&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://lwscode.cn/5/"/>
    <id>https://lwscode.cn/5/</id>
    <published>2021-04-14T13:07:18.432Z</published>
    <updated>2021-04-16T10:27:00.020Z</updated>
    
    <content type="html"><![CDATA[<h1>DAY05</h1><h2 id="输出函数说明">输出函数说明</h2><p>printf函数</p><ul><li>头文件:stdio.h</li><li>原型:int printf(const char *format,…);</li><li>format:格式控制字符串</li><li>…:可变参数列表</li><li>返回值:输出字符类型</li></ul><h2 id="输出函数说明-2">输出函数说明</h2><p>scanf函数</p><ul><li>头文件:stdio.h</li><li>原型:int scanf(const char *format,…);</li><li>format:格式控制字符</li><li>…:可变参数列表</li><li>返回值:成功读入列表</li></ul><p>请使用printf函数,求解一个数字n的十进制表示的数字位数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">#include&lt;stdio.h&gt;<br>int main()&#123;<br>    int n;<br>    while(scanf(&quot;%d&quot;,&amp;n)!&#x3D;EOF)&#123;<br>        printf(&quot; has %d digits\n&quot;,printf(&quot;%d&quot;,n));<br>    &#125;<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>请写一个程序,读入一个行字符串(可能包含空格),输出这个字符串中字符的数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">#include&lt;stdio.h&gt;<br>int main()&#123;<br>    char str[100];<br>    while(scanf(&quot;%[^\n]s&quot;,str)!&#x3D;EOF) &#123;<br>        getchar();<br>        printf(&quot; has %d chars\n&quot;,printf(&quot;%s&quot;,str));<br>    &#125;<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="sprintf和fprintf代码演示">sprintf和fprintf代码演示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs plain">#include &lt;stdio.h&gt;<br>#define swap(a, b) &#123; \<br>    __typeof(a) temp &#x3D; a;\<br>    a &#x3D; b, b &#x3D; temp; \<br>&#125;<br><br>int main() &#123;<br>    printf(&quot;%c\n&quot;, 97);<br>    int n;<br>    scanf(&quot;%d&quot;, &amp;n);<br>    printf(&quot;%04d\n&quot;, n);<br>    char str[100], buff[100], *p &#x3D; str, *q &#x3D; buff;<br>    sprintf(str, &quot;%d.%d.%d.%d&quot;, 192,168,1,10);<br>    printf(&quot;str&#x3D;%s\n&quot;, str);<br>    if (n &amp; 1) &#123;<br>        sprintf(q, &quot;(%s)&quot;, p);<br>        swap(p, q);<br>    &#125;<br>    if (n &amp; 2) &#123;<br>        sprintf(q, &quot;[%s]&quot;, p);<br>        swap(p, q);<br>    &#125;<br>    if (n &amp; 4) &#123;<br>        sprintf(q, &quot;&#123;%s&#125;&quot;, p);<br>        swap(p, q);<br>    &#125;<br>    FILE *fout &#x3D; fopen(&quot;output&quot;, &quot;w&quot;);<br>    fprintf(stdout, &quot;stdout &#x3D; %s\n&quot;, p);<br>    fprintf(stderr, &quot;stderr &#x3D; %s\n&quot;, p);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;DAY05&lt;/h1&gt;
&lt;h2 id=&quot;输出函数说明&quot;&gt;输出函数说明&lt;/h2&gt;
&lt;p&gt;printf函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;头文件:stdio.h&lt;/li&gt;
&lt;li&gt;原型:int printf(const char *format,…);&lt;/li&gt;
&lt;li&gt;forma</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://lwscode.cn/6/"/>
    <id>https://lwscode.cn/6/</id>
    <published>2021-04-14T13:07:18.432Z</published>
    <updated>2021-04-16T10:27:00.021Z</updated>
    
    <content type="html"><![CDATA[<h1>RedBlack_Tree</h1><h2 id="五个条件">五个条件</h2><ol><li>节点非黑即红</li><li>根节点是黑色的</li><li>叶节点(NIL)是黑色的</li><li>如果一个节点是红色的，则它的两个子节点都是黑色的</li><li>从根节点出发到所有叶节点路径上，黑色节点数量相同</li></ol><p>最短路径全黑，节点数a，最长路径有相同多个黑色节点（条件5）</p><p>，红色节点不能连续（条件4），节点数2a</p><h2 id="调整策略">调整策略</h2><p>插入节点站在祖父节点看</p><p>删除调整站在父节点看</p><h3 id="插入调整">插入调整</h3><p>用带有两个黑色的NIL的新节点替换NIL叶节点</p><p>为了方便调整，新结点初始为红色（黑色节点影响条件5）</p><h4 id="情况一">情况一</h4><p>插入节点的父节点是黑色</p><p>直接插入</p><h4 id="情况二">情况二</h4><p>插入节点的父节点和叔节点都是红色</p><p>父节点、叔节点染成黑色，祖父节点染成红色</p><h4 id="情况三LL">情况三LL</h4><p>插入节点的父节点是红色，叔节点是黑色，插入节点是父节点的左孩子，父节点是祖父节点的左孩子</p><p>祖父节点右旋，祖父节点染成红色，父节点染成黑色</p><h4 id="情况四LR">情况四LR</h4><p>插入节点的父节点是红色，叔节点是黑色，插入节点是父节点的右孩子，父节点是祖父节点的左孩子</p><p>父节点左旋，转换为情况三（祖父节点右旋，祖父节点染成红色，父节点染成黑色）</p><h3 id="删除调整">删除调整</h3><h4 id="情况一-2">情况一</h4><p>兄弟节点是红色</p><p>父节点左旋，父节点染成红色，兄弟节点染成黑色</p><h4 id="情况二-2">情况二</h4><p>父节点、兄弟节点和兄弟节点的子节点都是黑色</p><p>父节点左旋，父节点染成红色</p><h4 id="情况三">情况三</h4><p>父节点红色，兄弟节点和兄弟节点的子节点都是黑色</p><p>父节点左旋</p><h4 id="情况四">情况四</h4><p>父节点任意颜色，兄弟节点的右儿子红色，删除节点是父节点的左儿子</p><p>父节点左旋，交换父节点、兄弟节点的颜色，兄弟节点的右孩子染成黑色</p><h4 id="情况五">情况五</h4><p>父节点任意颜色，兄弟节点的左儿子红色，删除节点是父节点的左儿子</p><p>兄弟节点染成红色，兄弟节点的左儿子染成黑色，兄弟节点右旋，转换为情况四</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;RedBlack_Tree&lt;/h1&gt;
&lt;h2 id=&quot;五个条件&quot;&gt;五个条件&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;节点非黑即红&lt;/li&gt;
&lt;li&gt;根节点是黑色的&lt;/li&gt;
&lt;li&gt;叶节点(NIL)是黑色的&lt;/li&gt;
&lt;li&gt;如果一个节点是红色的，则它的两个子节点都是黑色的&lt;/li&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://lwscode.cn/7/"/>
    <id>https://lwscode.cn/7/</id>
    <published>2021-04-14T13:07:18.432Z</published>
    <updated>2021-04-16T10:27:00.021Z</updated>
    
    <content type="html"><![CDATA[<h1>NOTE</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;NOTE&lt;/h1&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://lwscode.cn/1/"/>
    <id>https://lwscode.cn/1/</id>
    <published>2021-04-14T13:07:18.431Z</published>
    <updated>2021-04-16T10:27:00.020Z</updated>
    
    <content type="html"><![CDATA[<p>alias 别名 alias x = “cd /home/lws/hzoj”</p><p>练习2 在root下生成的文件 更改为lws</p><p>.profile 登录时执行</p><p>.bashrc 登录后执行</p><p>date +“%Y-%m-%d %H:%M:%S”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;alias 别名 alias x = “cd /home/lws/hzoj”&lt;/p&gt;
&lt;p&gt;练习2 在root下生成的文件 更改为lws&lt;/p&gt;
&lt;p&gt;.profile 登录时执行&lt;/p&gt;
&lt;p&gt;.bashrc 登录后执行&lt;/p&gt;
&lt;p&gt;date +“%Y-%m-%d %H</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://lwscode.cn/3/"/>
    <id>https://lwscode.cn/3/</id>
    <published>2021-04-14T13:07:18.431Z</published>
    <updated>2021-04-16T10:27:00.020Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1>DAY01</h1><h2 id="更新源">更新源</h2><h3 id="打开终端（Ctrl-Alt-T），执行命令">打开终端（Ctrl+Alt+T），执行命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo gedit &#x2F;etc&#x2F;apt&#x2F;sources.list<br></code></pre></td></tr></table></figure><h3 id="将文本框的内容删除，粘贴以下内容-保存并退出">将文本框的内容删除，粘贴以下内容,保存并退出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse<br>deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse<br>deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse<br>deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse<br>deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse<br>deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse<br>deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse<br>deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse<br>deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse<br>deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse<br></code></pre></td></tr></table></figure><p>·预先加载的应用（apt-get install preload）能识别一个用户最常用的<br>程序，也能把二进制文件和依赖性预先加载到内存，以提供更快速的访<br>问。随着安装后的第一次重启，它会自动运行。<br>·BleachBit（apt-get install bleachbit）释放磁盘空间，通过释放缓<br>存、删除cookie、清除上网记录、粉碎临时文件、删除日志，以及丢弃<br>其他一些非必需的文件来提高隐私性。使用高级技术，包括粉碎文件来<br>防止恢复，擦除空闲磁盘空间来隐藏没有完全删除的文件的踪迹。</p><p>~/.config/deepin/deepin-terminal/config.conf</p><h3 id="执行命令">执行命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo apt-get update<br>sudo apt-get upgrade<br></code></pre></td></tr></table></figure><h2 id="配置VIM">配置VIM</h2><h3 id="打开终端，执行命令">打开终端，执行命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo gedit &#x2F;etc&#x2F;hosts<br></code></pre></td></tr></table></figure><h3 id="将以下两行文本添加到文本框中，保存并退出">将以下两行文本添加到文本框中，保存并退出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">192.30.255.112 github.com git<br>185.31.16.184 github.global.ssl.fastly.net<br></code></pre></td></tr></table></figure><h3 id="执行命令-2">执行命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo wget -qO- https:&#x2F;&#x2F;raw.github.com&#x2F;ma6174&#x2F;vim&#x2F;master&#x2F;setup.sh | sh -x<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/LSG_Down/article/details/89319472">https://blog.csdn.net/LSG_Down/article/details/89319472</a></p><p><a href="https://www.jianshu.com/p/75cde8a80fd7">https://www.jianshu.com/p/75cde8a80fd7</a></p><h2 id="安装sshpi及scppi">安装sshpi及scppi</h2><p>sshpi.sh参考代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs plain">#!&#x2F;bin&#x2F;bash<br><br>#文件名：sshpi.sh<br>#用途：远程连接树莓派<br><br>function Usage() &#123;<br>echo &quot;Usage: sshpi Username@pi&quot;<br>echo &quot;Like This：sshpi UserA@pi1&quot;<br>&#125;<br>if [[ ! $# -eq 1  ]]; then<br>Usage<br>exit<br>fi<br><br>echo $1 | grep &quot;@&quot; &gt;&#x2F;dev&#x2F;zero 2&gt;&amp;1<br><br>if [[ ! $? -eq 0 ]]; then<br>echo &quot;argument wrong！&quot;<br>Usage<br>exit<br>fi<br>Username&#x3D;&#96;echo $1 | cut -d &quot;@&quot; -f 1&#96;<br>if [[ $&#123;Username&#125;x &#x3D;&#x3D; x ]]; then<br>echo &quot;Please input your username!&quot;<br>Usage<br>exit<br>fi<br>Hostname&#x3D;&#96;echo $1 | cut -d &quot;@&quot; -f 2&#96;<br>if [[ $&#123;Hostname&#125;x &#x3D;&#x3D; x ]]; then<br>echo &quot;Please input Hostname of Pi!&quot;<br>Usage<br>exit<br>fi<br>echo $Hostname | grep -w &quot;^pi[1-9][0-9]\?&quot; &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1<br>if [[ ! $? -eq 0 ]]; then<br>echo &quot;Hostname is Wrong!&quot;<br>Usage<br>exit<br>fi<br>HostNum&#x3D;&#96;echo $Hostname | cut -c 3-&#96;<br>if [[ $HostNum -gt 22 ]]; then<br>echo &quot;Hostname is Wrong!&quot;<br>Usage<br>exit<br>fi<br><br>port&#x3D;$[6530 + $HostNum]<br>echo -e &quot;\033[46;30m You Will login\033[0m\033[46;31m $Hostname\033[0m\033[46;30m with Username \033[46;31m$Username\033[0m\033[46;30m, enjoy it!\033[0m&quot;<br>ssh -p $port $&#123;Username&#125;@zentao.haizeix.tech<br></code></pre></td></tr></table></figure><p>scppi.sh参考代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs plain">#!&#x2F;bin&#x2F;bash<br><br>#文件名：scppi.sh<br>#用途：远程拷贝文件，在树莓派和本机之间<br><br>function Usage() &#123;<br>echo &quot;Usage: scppi file_or_dir Username@piname:dest_file_or_dir&quot;<br>echo &quot;       scppi Username@piname:.&#x2F;file_or_dir  file_or_dir&quot;<br>echo &quot;Like This：scppi PiHealth pi@pi1:.&#x2F;new&quot;<br>&#125;<br>if [[ ! $# -eq 2  ]]; then<br>Usage<br>exit<br>fi<br>#1.源<br>#2.目标<br><br>echo $1 | grep -q &quot;@&quot;<br><br>if [[ $? -eq 0 ]]; then<br>remote&#x3D;$1<br>local&#x3D;$2<br>else<br>remote&#x3D;$2<br>local&#x3D;$1<br>fi<br><br>echo $remote | grep @ | grep : &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1<br>if [[ ! $? -eq 0 ]]; then<br>echo &quot;argument wrong！&quot;<br>Usage<br>exit<br>fi<br>Username&#x3D;&#96;echo $remote | cut -d &quot;@&quot; -f 1&#96;<br>if [[ $&#123;Username&#125;x &#x3D;&#x3D; x ]]; then<br>echo &quot;Please input your username!&quot;<br>Usage<br>exit<br>fi<br>Hostname&#x3D;&#96;echo $remote | cut -d &quot;@&quot; -f 2 | cut -d &quot;:&quot; -f 1&#96;<br>if [[ $&#123;Hostname&#125;x &#x3D;&#x3D; x ]]; then<br>echo &quot;Please input Hostname of Pi!&quot;<br>Usage<br>exit<br>fi<br>echo $Hostname | grep -w &quot;^pi[1-9][0-9]\?&quot; &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1<br>if [[ ! $? -eq 0 ]]; then<br>echo &quot;Hostname is Wrong!&quot;<br>Usage<br>exit<br>fi<br>dir_file&#x3D;&#96;echo $remote | cut -d &quot;@&quot; -f 2 | cut -d &quot;:&quot; -f 2&#96;<br>if [[ $&#123;dir_file&#125;x &#x3D;&#x3D; x ]]; then<br>echo &quot;Please input dest_file_or_dir of Pi!&quot;<br>Usage<br>exit<br>fi<br><br>HostNum&#x3D;&#96;echo $Hostname | cut -c 3-&#96;<br><br>if [[ $HostNum -gt 22 ]]; then<br>echo &quot;Hostname is Wrong!&quot;<br>Usage<br>exit<br>fi<br><br>port&#x3D;$[6530 + $HostNum]<br>echo -e &quot;\033[46;30m Coping \033[46;31m$1\033[46;30m to \033[46;31m$dir_file\033[46;30m on \033[46;31m$Hostname\033[46;30m with Username \033[46;31m$Username\033[46;30m, enjoy it!\033[0m&quot;<br><br>if [[ $1 &#x3D; $local ]]; then<br>scp -P $port -r $1  $&#123;Username&#125;@zentao.haizeix.tech:$dir_file<br>else<br>scp -P $port -r $&#123;Username&#125;@zentao.haizeix.tech:$dir_file $local<br>fi<br></code></pre></td></tr></table></figure><h3 id="打开终端，执行命令-2">打开终端，执行命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">vim sshpi.sh<br></code></pre></td></tr></table></figure><h3 id="在VIM文本框里粘贴sshpi脚本的代码，保存并退出（：wq）">在VIM文本框里粘贴sshpi脚本的代码，保存并退出（：wq）</h3><h3 id="将sshpi-sh重命名为sshpi-赋予sshpi脚本可执行权限">将sshpi.sh重命名为sshpi,赋予sshpi脚本可执行权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">mv sshpi.sh sshpi<br>chmod a+x sshpi<br></code></pre></td></tr></table></figure><h3 id="执行命令-3">执行命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">echo $PATH<br></code></pre></td></tr></table></figure><h3 id="将sshpi复制到PATH路径下">将sshpi复制到PATH路径下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">cp sshpi &#x2F;bin<br></code></pre></td></tr></table></figure><h3 id="同样的操作生成scppi脚本">同样的操作生成scppi脚本</h3><h1>DAY02</h1><h2 id="设置免密登录">设置免密登录</h2><h3 id="打开终端，执行命令-3">打开终端，执行命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sshpi lws@pi3<br></code></pre></td></tr></table></figure><p>暂时需要密码（haizei）来连接树莓派</p><h3 id="在本机生成秘钥">在本机生成秘钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">ssh-keygen<br></code></pre></td></tr></table></figure><h3 id="将秘钥复制到authorized-keys文件中">将秘钥复制到authorized_keys文件中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">cat .ssh&#x2F;id_rsa.pub&gt;&gt;.ssh&#x2F;authorized_keys<br></code></pre></td></tr></table></figure><h3 id="将本机的authorized-keys文件复制到树莓派中">将本机的authorized_keys文件复制到树莓派中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">scppi .ssh&#x2F;authorized_keys lws@pi3:&#x2F;.ssh<br></code></pre></td></tr></table></figure><h3 id="再次连接树莓派，验证是否成功">再次连接树莓派，验证是否成功</h3><p>check.c</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs plain">#include &lt;stdio.h&gt;<br>#include &lt;sys&#x2F;socket.h&gt;<br>#include &lt;sys&#x2F;types.h&gt;<br>#include &lt;arpa&#x2F;inet.h&gt;<br>#include &lt;unistd.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;pwd.h&gt;<br><br>int socket_connect(int port, char *host) &#123;<br>int sockfd;<br>struct sockaddr_in dest_addr;<br>if ((sockfd &#x3D; socket(AF_INET, SOCK_STREAM, 0)) &lt; 0) &#123;<br>perror(&quot;socket() error&quot;);<br>return -1;<br>&#125;<br><br>memset(&amp;dest_addr, 0, sizeof(dest_addr));<br>dest_addr.sin_family &#x3D; AF_INET;<br>dest_addr.sin_port &#x3D; htons(port);<br>dest_addr.sin_addr.s_addr &#x3D; inet_addr(host);<br><br>if (connect(sockfd, (struct sockaddr *)&amp;dest_addr, sizeof(dest_addr)) &lt; 0) &#123;<br>perror(&quot;connect() error&quot;);<br>return -1;<br>&#125;<br>return sockfd;<br><br>&#125;<br><br>int main() &#123;<br>int  socket_fd;<br>struct passwd *pwd;<br>pwd &#x3D; getpwuid(getuid());<br>char ip_addr[20] &#x3D; &quot;192.168.1.40&quot;;<br>int port &#x3D; 8888;<br>char username[20] &#x3D; &#123;0&#125;;<br>strcpy(username, pwd-&gt;pw_name);<br>socket_fd &#x3D; socket_connect(port, ip_addr);<br>if (socket_fd &lt; 0)<br>&#123;<br>exit(1);<br>&#125;<br>if (send(socket_fd, username, strlen(username), 0) &gt; 0) &#123;<br>printf(&quot;Check Success\n&quot;);<br>&#125; <br>close(socket_fd);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>gcc check.c -o check</p><h2 id="VIM的简单使用">VIM的简单使用</h2><p><img src="https://ese3a9b6c5d0ic.prissl.qiqiuyun.net/course-activity-272/20190411093248-lntidnybu9wksckc/53eb89158008bece_img3?e=1563481633&amp;token=ExRD5wolmUnwwITVeSEXDQXizfxTRp7vnaMKJbO-:CAFs0zlzq99uvJ2s6B6SYjVIbcI=" alt="img"></p><h3 id="VIM的四种模式">VIM的四种模式</h3><h3 id="普通模式">普通模式</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>x d dd ndd dw d$ d^ dG dnG</td><td>删除说明</td></tr><tr><td>y yy yG ynG y$ y^</td><td>复制</td></tr><tr><td>p P</td><td>粘贴</td></tr><tr><td>gg GG ngg</td><td>移动光标</td></tr><tr><td>R cc cG cnG c$ c^</td><td>替换</td></tr><tr><td>u ctrl+r ctrl+v</td><td>undo redo 可视块操作</td></tr></tbody></table><h3 id="插入模式">插入模式</h3><table><thead><tr><th>i</th><th>在光标之前追加</th></tr></thead><tbody><tr><td>a</td><td>在光标之后追加</td></tr><tr><td>A</td><td>在一行的结尾处追加</td></tr><tr><td>I</td><td>在一行的开头处插入</td></tr><tr><td>o</td><td>在光标所在位置的下一行打开新行插入</td></tr><tr><td>O</td><td>在光标所在位置的上一行打开新行插入</td></tr></tbody></table><h3 id="命令模式">命令模式</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>:w :q :wq :x :wq! :q!</td><td>文件的保存与退出操作</td></tr><tr><td>:args</td><td>显示文件名称，切换文件</td></tr><tr><td>:e foo.txt</td><td>打开foo.txt</td></tr><tr><td>:saveas ~/foo.txt</td><td>另存为~/foo.txt</td></tr><tr><td>:split :vsplit</td><td>切分窗口</td></tr><tr><td>:set</td><td>设置选项</td></tr></tbody></table><h3 id="其他使用技巧">其他使用技巧</h3><table><thead><tr><th>Ctrl+z</th><th>挂起</th></tr></thead><tbody><tr><td>fg</td><td>返回前台</td></tr><tr><td>/findstring</td><td>查找</td></tr></tbody></table><h2 id="Python的升级与tldr的升级">Python的升级与tldr的升级</h2><h3 id="打开终端，执行命令-4">打开终端，执行命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo apt-get install python<br>sudo apt-get install python3<br></code></pre></td></tr></table></figure><h3 id="查看Python版本">查看Python版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">python -V<br>python3 -V<br></code></pre></td></tr></table></figure><h3 id="获取Python路径">获取Python路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">which python<br></code></pre></td></tr></table></figure><h3 id="查看Python">查看Python</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">ls -al &#x2F;usr&#x2F;bin&#x2F;python<br></code></pre></td></tr></table></figure><h3 id="强制删除Python，将Python3-5指向Python">强制删除Python，将Python3.5指向Python</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo rm &#x2F;usr&#x2F;bin&#x2F;python<br>sudo ln &#x2F;usr&#x2F;bin&#x2F;python3.5 &#x2F;usr&#x2F;bin&#x2F;python<br></code></pre></td></tr></table></figure><h3 id="安装pyhton3-pip">安装pyhton3-pip</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo apt-get insatll python3-pip<br></code></pre></td></tr></table></figure><h3 id="升级pip">升级pip</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">pip install --upgrade pip<br></code></pre></td></tr></table></figure><h3 id="pip3-list报错，解决">pip3 list报错，解决</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo vim &#x2F;usr&#x2F;bin&#x2F;pip3<br></code></pre></td></tr></table></figure><p>在文本框中pip后加上._internal</p><h3 id="安装tldr">安装tldr</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo pip install tldr<br></code></pre></td></tr></table></figure><h2 id="Linux极简入门">Linux极简入门</h2><h3 id="软件的安装与卸载">软件的安装与卸载</h3><ul><li>apt-get update</li><li>apt-get upgrade</li><li>apt-get install xxx</li><li>apt-get --purge remove xxx</li><li>apt-cache search xxx</li></ul><h3 id="目录">目录</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>cd</td><td>切换当前目录</td></tr><tr><td>pwd</td><td>打印当期目录工作</td></tr><tr><td>mkdir</td><td>创建目录</td></tr></tbody></table><h3 id="cd切换工作">cd切换工作</h3><ul><li><p>cd /etc直接切换到/etc目录</p><p>cd …切换到上层目录</p><p>cd .切换到当前目录</p><p>cd回到自己的家目录</p><p>cd ~回到自己的家目录</p><p>cd -回到上次工作目录</p></li></ul><h3 id="pwd打印当前工作目录">pwd打印当前工作目录</h3><p>pwd [-LP]</p><ul><li>-L显示逻辑工作目录<br>-P显示物理工作目录</li></ul><h3 id="mkdir创建目录">mkdir创建目录</h3><p>mkdir [-pm] <dir></p><ul><li><p>​-p自动创建父目录</p><p>​-m设置权限</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;DAY01&lt;/h1&gt;
&lt;h2 id=&quot;更新源&quot;&gt;更新源&lt;/h2&gt;
&lt;h3 id=&quot;打开终端（Ctrl-Alt-T），执行命令&quot;&gt;打开终端（Ctrl+Alt+T），执行命令&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://lwscode.cn/2/"/>
    <id>https://lwscode.cn/2/</id>
    <published>2021-04-14T13:07:18.430Z</published>
    <updated>2021-04-16T10:27:00.020Z</updated>
    
    <content type="html"><![CDATA[<p>打印环境变量 echo ${PATH}</p><p>which ls 查找ls命令位</p><p>man ls 检索ls命令用法</p><p>alias a=‘echo hahaha’ 别名</p><p>chmod 更改文件权限 chown</p><p>su - root 切换用户</p><p>whoami 身份 who am i 身份+</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;打印环境变量 echo ${PATH}&lt;/p&gt;
&lt;p&gt;which ls 查找ls命令位&lt;/p&gt;
&lt;p&gt;man ls 检索ls命令用法&lt;/p&gt;
&lt;p&gt;alias a=‘echo hahaha’ 别名&lt;/p&gt;
&lt;p&gt;chmod 更改文件权限 chown&lt;/p&gt;
&lt;p&gt;su - </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://lwscode.cn/0/"/>
    <id>https://lwscode.cn/0/</id>
    <published>2021-04-14T13:07:18.430Z</published>
    <updated>2021-04-17T05:29:17.628Z</updated>
    
    <content type="html"><![CDATA[<p>替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">ls -al &#96;which ls&#96; 或<br>ls -al $(which ls)<br></code></pre></td></tr></table></figure><p>高亮显示 grep</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">locate ls.c | grep ls.c<br></code></pre></td></tr></table></figure><p>查找 find</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">find ~ -name &quot;*.c&quot;<br></code></pre></td></tr></table></figure><p>.c .cpp .sh .h 求总行数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo find ~ \( -name &quot;*.[ch]&quot; -o -name &quot;*.sh&quot; -o -name &quot;*.cpp&quot; \) -exec wc -l &#123;&#125; \; | xargs wc -l<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;替换&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://lwscode.cn/21/"/>
    <id>https://lwscode.cn/21/</id>
    <published>2021-04-14T13:07:14.945Z</published>
    <updated>2021-04-16T10:27:00.025Z</updated>
    
    <content type="html"><![CDATA[<p>您好，我是来自黑龙江大学的一名大四学生，所学专业是网络工程。由于更喜爱编程，我将精力更多放在了c/c++学习上。我熟悉常用算法和数据结构。平时编程学习都是在linux下的，对linux较为熟练，熟悉shell和python这两门脚本语言。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;您好，我是来自黑龙江大学的一名大四学生，所学专业是网络工程。由于更喜爱编程，我将精力更多放在了c/c++学习上。我熟悉常用算法和数据结构。平时编程学习都是在linux下的，对linux较为熟练，熟悉shell和python这两门脚本语言。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
